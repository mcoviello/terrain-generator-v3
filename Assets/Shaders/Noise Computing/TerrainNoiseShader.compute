// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


RWTexture2D<float4> _ChunkHeightMap;
int2  _ChunkCoords;
int  _ChunkSize;
float   _Resolution;
float   _Frequency;
float   _Amplitude;
float   _Lacunarity;
float   _Gain;
int     _Octaves;
float   _Time;

//Simplex noise function from: 
//https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl
//Credit to Ian McEwan, Ashima Arts., Stegu
float3 mod289(float3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float3 permute(float3 x) {
    return mod289(((x * 34.0) + 10.0) * x);
}

float snoise(float2 v)
{
    const float4 C = float4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
        -0.577350269189626,  // -1.0 + 2.0 * C.x
        0.024390243902439); // 1.0 / 41.0
// First corner
    float2 i = floor(v + dot(v, C.yy));
    float2 x0 = v - i + dot(i, C.xx);

    // Other corners
    float2 i1;
    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    float4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    float3 p = permute(permute(i.y + float3(0.0, i1.y, 1.0))
        + i.x + float3(0.0, i1.x, 1.0));

    float3 m = max(0.5 - float3(dot(x0, x0), dot(x12.xy, x12.xy), 
    dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

    // Compute final noise value at P
    float3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return (130.0 * dot(m, g));
}

float RidgedNoise(float2 v) {
    return 1-abs(snoise(v));
}

float Simplex01(float2 v){
    return (snoise(v) + 1) / 2.0;
}

inline float4 EncodeFloatRGBA(float v)
{
    uint vi = (v * (256.0f * 256.0f * 256.0f * 256.0f));
    int ex = (vi / (256 * 256 * 256) % 256);
    int ey = ((vi / (256 * 256)) % 256);
    int ez = ((vi / (256)) % 256);
    int ew = (vi % 256);
    float4 e = float4(ex / 255.0f, ey / 255.0f, ez / 255.0f, ew / 255.0f);
    return e;
}

inline float4 EncodeFloatRGBAUnity( float v )
{
    float4 kEncodeMul = float4(1.0, 255.0, 65025.0, 160581375.0);
    float kEncodeBit = 1.0/255.0;
    float4 enc = kEncodeMul * v;
    enc = frac (enc);
    enc -= enc.yzww * kEncodeBit;
    return enc.argb;
}

float RoundToDP(float toRound, int dp){
    int temp = pow(10, dp);
    return round(toRound * temp) / temp;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float x = (id.x) / (float)(_ChunkSize-1);
    float y = (id.y) / (float)(_ChunkSize-1);
    float noiseVal = 0.0;
    float maxAmp = 0;

    float2 coords = (_ChunkCoords + float2(x,y)) / _ChunkSize;
    
    for (int i = 0; i < _Octaves; i++) {
        noiseVal += _Amplitude * RidgedNoise( _Frequency * (coords));
        maxAmp += _Amplitude;

        coords *= _Lacunarity;
        _Amplitude *= _Gain;
    }

    noiseVal /= maxAmp;

    _ChunkHeightMap[id.xy] = EncodeFloatRGBAUnity(noiseVal);//float4(0.4f, 0.1f,0.2f,0.3f);
}


